@model IEnumerable<MillenniumWebFixed.Models.Product>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Stock Inventory (JSON Model)";
}
<script>
    showSpinner("Loading stock data...");
</script>

<div class="container mt-0" style="font-size: 0.85rem;">

    <h5 class="mb-3">Stock Inventory (JSON-Based)</h5>
    <div id="stockGridWrapper" class="d-none">
        <table id="productTable" class="table table-bordered table-sm table-striped table-hover align-middle mt-0">
            <thead class="table-dark">
                <tr>
                    <th style="width: 20px;"></th> <!-- expand button -->
                    <th style="width: 90px;">Code</th>
                    <th style="min-width: 250px;">Name</th>
                    <th style="width: 120px;">Item Type</th>
                    <th style="width: 50px; text-align:center;">B-UOM</th>
                    <th style="width: 45px; text-align:center;">Status</th>
                    <th style="width: 45px; text-align:center;">Count</th>
                    <th style="width: 45px; text-align:center;">Status</th>
                    <th style="width: 40px; text-align:center;">Edit</th>
                </tr>
            </thead>
            <tbody>
                @using MillenniumWebFixed.Models

                @foreach (var item in Model)
                {
                    var propsList = item.Properties ?? new List<ProductProperty>();
                    var jsonProps = Newtonsoft.Json.JsonConvert.SerializeObject(
                        propsList.Select(p => new { p.PropertyName, p.Value, p.Units })
                    );

                    var conversions = item.ItemType?.UOMConversions;
                    var uomHtml = conversions?.Any() == true
                        ? string.Join("<br/>", conversions.Select(c => c.Formula))
                        : "<span class='text-muted'>No conversions available</span>";

                    var typeProps = item.ItemType?.Properties;
                    string typePropHtml;

                    if (item.ItemType?.Properties?.Any() == true)
                    {
                        var rowBuilder = new System.Text.StringBuilder();

                        foreach (var p in item.ItemType.Properties)
                        {
                            rowBuilder.AppendLine("<tr>");
                            rowBuilder.AppendLine($"<td>{p.PropertyName}</td>");
                            rowBuilder.AppendLine($"<td>{p.DataType}</td>");
                            rowBuilder.AppendLine($"<td>{p.Units}</td>");
                            rowBuilder.AppendLine($"<td>{(p.IsCalculated ? "Yes" : "No")}</td>");
                            rowBuilder.AppendLine($"<td>{(!string.IsNullOrWhiteSpace(p.Formula) ? p.Formula : "-")}</td>");
                            rowBuilder.AppendLine("</tr>");
                        }

                        typePropHtml = $@"
                                                                            <table class='table table-sm table-bordered small mb-0'>
                                                                                <thead class='table-light'>
                                                                                    <tr>
                                                                                        <th>Name</th>
                                                                                        <th>Data Type</th>
                                                                                        <th>Units</th>
                                                                                        <th>Calculated?</th>
                                                                                        <th>Formula</th>
                                                                                    </tr>
                                                                                </thead>
                                                                                <tbody>
                                                                                    {rowBuilder}
                                                                                </tbody>
                                                                            </table>";
                    }
                    else
                    {
                        typePropHtml = "<div class='text-muted small'>No item type properties available for this product.</div>";
                    }


                    string assemblyHtml;

                    if (item.Assemblies?.Any() == true)
                    {
                        var assemblyTable = new System.Text.StringBuilder();

                        assemblyTable.AppendLine("<table class='table table-sm table-bordered mb-0 small'>");
                        assemblyTable.AppendLine("<thead class='table-light'><tr>");
                        assemblyTable.AppendLine("<th>Component</th><th>Qty</th><th>Unit</th><th>Cost/Unit</th><th>Total Formula</th><th>Notes</th>");
                        assemblyTable.AppendLine("</tr></thead><tbody>");

                        foreach (var assembly in item.Assemblies)
                        {
                            foreach (var component in assembly.Components)
                            {
                                var componentLabel = component.ComponentProduct != null
                                    ? $"{component.ComponentProduct.ProductCode} - {component.ComponentProduct.Name}"
                                    : "[Unknown Component]";


                                assemblyTable.AppendLine("<tr>");
                                assemblyTable.AppendLine($"<td>{componentLabel}</td>");
                                assemblyTable.AppendLine($"<td>{component.QtyPerUOM}</td>");
                                assemblyTable.AppendLine($"<td>{component.Unit}</td>");
                                assemblyTable.AppendLine($"<td>{component.CostPerUnit.ToString("0.00")}</td>");
                                assemblyTable.AppendLine($"<td>{(string.IsNullOrWhiteSpace(component.TotalFormula) ? "-" : component.TotalFormula)}</td>");
                                assemblyTable.AppendLine($"<td>{(string.IsNullOrWhiteSpace(component.Notes) ? "-" : component.Notes)}</td>");
                                assemblyTable.AppendLine("</tr>");
                            }
                        }

                        assemblyTable.AppendLine("</tbody></table>");

                        assemblyHtml = $@"<div class='alert alert-secondary p-2'>
                                                                                    <strong>Assembly Components:</strong>
                                                                                    <div class='mt-2'>{assemblyTable}</div>
                                                                                </div>";
                    }
                    else
                    {
                        assemblyHtml = "<div class='text-muted small'>No assembly components linked to this product.</div>";
                    }

                    var extrasHtml = $@"
                                                                        <div class='alert alert-secondary p-2 mb-2'>
                                                                            <strong>UOM Conversions:</strong><br/>
                                                                            <span class='small'>{uomHtml}</span>
                                                                        </div>
                                                                        <div class='alert alert-secondary p-2 mb-2'>
                                                                            <strong>Item Type Properties:</strong>
                                                                            <div class='mt-2'>{typePropHtml}</div>
                                                                        </div>
                                                                        {assemblyHtml}
                                                                    ";


                    var rowClass = item.StockLevel < item.ReorderPoint ? "table-danger" :
                                   item.StockLevel == item.ReorderPoint ? "table-warning" :
                                   "";

                    <tr data-child='@Html.Raw(jsonProps)' data-extras='@Html.Raw(HttpUtility.UrlEncode(extrasHtml))'>
                        <td class="details-control"><i class="fas fa-plus-circle text-dark"></i></td>
                        <td>@item.ProductCode</td>
                        <td>@item.Name</td>
                        <td>
                            @if (item.ItemType != null)
                            {
                                <span class="text-body">@item.ItemType.Name</span>
                            }
                            else
                            {
                                <span class="text-body">[None]</span>
                            }
                        </td>
                        <td style="text-align:center;">@item.BaseUOM</td>
                        <td style="text-align:center;">
                            @if (item.IsActive)
                            {
                                <span class="badge bg-success fw-normal border">Active</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary fw-normal border">Inactive</span>
                            }
                        </td>
                        <td style="text-align:center;">@item.StockLevel</td>
                        @{
                            var reorderPoint = item.ReorderPoint ?? 0;
                        }

                        <td style="text-align:center;">
                            @if (item.StockLevel < reorderPoint)
                            {
                                <span class="badge bg-danger fw-normal border">LOW (@reorderPoint)</span>
                            }
                            else if (item.StockLevel == reorderPoint)
                            {
                                <span class="badge bg-warning fw-normal text-dark border">MIN (@reorderPoint)</span>
                            }
                            else
                            {
                                <span class="badge bg-success fw-normal border">OK (@reorderPoint)</span>
                            }
                        </td>

                        <td style="text-align:center;">
                            <button type="button" class="btn btn-sm btn-light border border-dark px-2 py-0 no-spinner" title="Manage Inventory"
                                    data-id="@item.Id"
                                    data-stock="@item.StockLevel"
                                    data-reorder="@item.ReorderPoint"
                                    data-lead="@item.LeadTimeDays"
                                    data-cost="@(item.CostPrice.HasValue ? item.CostPrice.Value.ToString(System.Globalization.CultureInfo.InvariantCulture) : "")"
                                    data-sell="@(item.SellingPrice.HasValue ? item.SellingPrice.Value.ToString(System.Globalization.CultureInfo.InvariantCulture) : "")"
                                    data-notes="@Html.Raw(HttpUtility.JavaScriptStringEncode(item.Notes ?? ""))"
                                    onclick="openInventoryModal(this)">
                                <i class="fas fa-tools me-1"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Fullscreen Product Management Modal -->
<div class="modal fade" id="inventoryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content shadow-sm border-0 small">
            <div class="modal-header py-2 px-3" style="background-color: #001C2B; color: white;">
                <h5 class="modal-title mb-0 fs-6" id="inventoryModalTitle">Manage Product</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <form id="inventoryForm" method="post" action="@Url.Action("UpdateInventory", "Stock")">
                @Html.AntiForgeryToken()
                <input type="hidden" name="Id" id="inv_Id" />

                <div class="modal-body px-4 pt-3 pb-2">
                    <div class="accordion" id="productAccordion">

                        <!-- General Inventory Section -->
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingGeneral">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseGeneral" aria-expanded="true">
                                    <i class="fas fa-circle me-2"></i> General Inventory Info
                                </button>
                            </h2>
                            <div id="collapseGeneral" class="accordion-collapse collapse" data-bs-parent="#productAccordion">
                                <div class="accordion-body">
                                    <div class="row g-3">
                                        <div class="col-md-4">
                                            <label for="inv_StockLevel" class="form-label">Stock Level</label>
                                            <input type="number" class="form-control" name="StockLevel" id="inv_StockLevel" />
                                        </div>
                                        <div class="col-md-4">
                                            <label for="inv_ReorderPoint" class="form-label">Reorder Point</label>
                                            <input type="number" class="form-control" name="ReorderPoint" id="inv_ReorderPoint" />
                                        </div>
                                        <div class="col-md-4">
                                            <label for="inv_LeadTimeDays" class="form-label">Lead Time (days)</label>
                                            <input type="number" class="form-control" name="LeadTimeDays" id="inv_LeadTimeDays" />
                                        </div>
                                        <div class="col-md-6">
                                            <label for="inv_CostPrice" class="form-label">Cost Price</label>
                                            <input type="number" step="0.01" class="form-control" name="CostPrice" id="inv_CostPrice" />
                                        </div>
                                        <div class="col-md-6">
                                            <label for="inv_SellingPrice" class="form-label">Selling Price</label>
                                            <input type="number" step="0.01" class="form-control" name="SellingPrice" id="inv_SellingPrice" />
                                        </div>
                                        <div class="col-md-12">
                                            <label for="inv_Notes" class="form-label">Notes</label>
                                            <textarea class="form-control" name="Notes" id="inv_Notes" rows="3"></textarea>
                                        </div>
                                        <div class="col-12 text-end mt-2">
                                            <button type="submit" class="btn theme-button btn-sm px-4">
                                                <i class="fas fa-save"></i> Save
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Properties Section -->
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingProperties">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseProperties">
                                    <i class="fas fa-circle me-2"></i> Product Properties
                                </button>
                            </h2>
                            <div id="collapseProperties" class="accordion-collapse collapse" data-bs-parent="#productAccordion">
                                <div class="accordion-body">
                                    <table class="table table-sm table-bordered table-striped">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>Name</th>
                                                <th>Value</th>
                                                <th>Units</th>
                                                <th style="width: 80px; text-align:center;">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody id="propertyList">
                                            <!-- JS will populate -->
                                        </tbody>
                                    </table>
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="openAddPropertyModal()">+ Add Property</button>
                                </div>
                            </div>
                        </div>

                        <!-- Assemblies Section -->
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingAssemblies">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAssemblies">
                                    <i class="fas fa-circle me-2"></i> Assemblies & Components
                                </button>
                            </h2>
                            <div id="collapseAssemblies" class="accordion-collapse collapse" data-bs-parent="#productAccordion">
                                <div class="accordion-body">
                                    <div id="assemblyContainer">
                                        <!-- JS will load each assembly and components -->
                                    </div>
                                    <button type="button" class="btn btn-outline-success btn-sm" onclick="openAddAssemblyModal()">+ Add Assembly</button>
                                </div>
                            </div>
                        </div>

                    </div> <!-- accordion end -->
                </div>

            </form>
        </div>
    </div>
</div>

<!-- Edit Property Modal -->
<div class="modal fade" id="editPropertyModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
        <div class="modal-content shadow-sm">
            <div class="modal-header py-2 px-3" style="background-color: #001C2B; color: white;">
                <h6 class="modal-title mb-0">Edit Property</h6>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body small">
                <input type="hidden" id="editProp_Id" />
                <input type="hidden" id="editProp_ProductId" />

                <div class="mb-2">
                    <label class="form-label mb-0">Name</label>
                    <input type="text" id="editProp_Name" class="form-control form-control-sm" readonly />
                </div>
                <div class="mb-2">
                    <label class="form-label mb-0">Value</label>
                    <input type="text" id="editProp_Value" class="form-control form-control-sm" />
                </div>
                <div class="mb-2">
                    <label class="form-label mb-0">Units</label>
                    <input type="text" id="editProp_Units" class="form-control form-control-sm" />
                </div>
            </div>
            <div class="modal-footer py-2 px-3">
                <button class="btn btn-danger btn-sm" onclick="deleteProperty()">Delete</button>
                <button class="btn theme-button btn-sm" onclick="saveProperty()">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Property Modal -->
<div class="modal fade" id="addPropertyModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
        <div class="modal-content shadow-sm">
            <div class="modal-header py-2 px-3" style="background-color: #001C2B; color: white;">
                <h6 class="modal-title mb-0">Add New Property</h6>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body small">
                <input type="hidden" id="addProp_ProductId" />

                <div class="mb-2">
                    <label class="form-label mb-0">Name</label>
                    <input type="text" id="addProp_Name" class="form-control form-control-sm" />
                </div>
                <div class="mb-2">
                    <label class="form-label mb-0">Value</label>
                    <input type="text" id="addProp_Value" class="form-control form-control-sm" />
                </div>
                <div class="mb-2">
                    <label class="form-label mb-0">Units</label>
                    <input type="text" id="addProp_Units" class="form-control form-control-sm" />
                </div>
            </div>
            <div class="modal-footer py-2 px-3">
                <button class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                <button class="btn btn-success btn-sm" onclick="createProperty()">Add</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Assembly Modal -->
<div class="modal fade" id="addAssemblyModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
        <div class="modal-content shadow-sm">
            <div class="modal-header py-2 px-3" style="background-color: #001C2B; color: white;">
                <h6 class="modal-title mb-0">Add Assembly</h6>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body small">
                <input type="hidden" id="addAssembly_ProductId" />
                <div class="mb-2">
                    <label class="form-label mb-0">Assembly Name</label>
                    <input type="text" id="addAssembly_Name" class="form-control form-control-sm" />
                </div>
            </div>
            <div class="modal-footer py-2 px-3">
                <button class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                <button class="btn btn-success btn-sm" onclick="createAssembly()">Add</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Component Modal -->
<div class="modal fade" id="addComponentModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-md modal-dialog-centered">
        <div class="modal-content shadow-sm">
            <div class="modal-header py-2 px-3" style="background-color: #001C2B; color: white;">
                <h6 class="modal-title mb-0" id="addComponentModalLabel">Add Component</h6>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body small">
                <!-- Hidden fields -->
                <input type="hidden" id="comp_Id" />
                <input type="hidden" id="comp_AssemblyId" />
                <input type="hidden" id="comp_ProductId" />

                <div class="row">
                    <div class="col">
                        <label class="form-label mb-0">Qty</label>
                        <input type="number" step="0.01" id="comp_Qty" class="form-control form-control-sm" />
                    </div>
                    <div class="col">
                        <label class="form-label mb-0">Unit</label>
                        <input type="text" id="comp_Unit" class="form-control form-control-sm" />
                    </div>
                    <div class="col">
                        <label class="form-label mb-0">Cost/Unit</label>
                        <input type="number" step="0.01" id="comp_Cost" class="form-control form-control-sm" />
                    </div>
                </div>
                <div class="mb-2 mt-2">
                    <label class="form-label mb-0">Total Formula</label>
                    <input type="text" id="comp_Formula" class="form-control form-control-sm" />
                </div>
                <div class="mb-2">
                    <label class="form-label mb-0">Notes</label>
                    <textarea id="comp_Notes" rows="2" class="form-control form-control-sm"></textarea>
                </div>
            </div>
            <div class="modal-footer py-2 px-3">
                <!-- Delete button, hidden initially -->
                <button class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                <button class="btn btn-success btn-sm" onclick="saveComponent()">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Global Confirm Delete Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content confirm-delete-modal shadow border rounded-3">
            <div class="modal-header bg-danger text-white py-2 px-3">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <span id="deleteModalMessage">Are you sure you want to delete this item?</span>
            </div>
            <div class="modal-footer justify-content-center">
                <button class="btn btn-outline-secondary" data-bs-dismiss="modal">No</button>
                <button id="confirmDeleteBtn" class="btn btn-danger">Yes, Delete</button>
            </div>
        </div>
    </div>
</div>

<style>
    .confirm-delete-modal {
        border: 1px solid #dc3545 !important; /* Red border like the header */
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.3) !important;
    }

    .modal-overlay-blur {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(3px);
        z-index: 1049; /* Just below Bootstrap modal (1050) */
    }

    .assembly-block {
        background-color: #aaa !important;
        border-left: 5px solid #001C2B;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

    /* Temp CSS - Test*/
    .accordion-body {
        background-color: #f8f9fa;
        border-radius: 0.375rem;
        padding: 1rem;
    }

    .accordion-item + .accordion-item {
        margin-top: 0.5rem;
        border-top: 1px solid #dee2e6;
    }


    .form-control, .form-select {
        border: 1px solid #ced4da;
        box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
        background-color: #fff;
    }

        .form-control:focus, .form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.15rem rgba(0,123,255,0.15);
        }
</style>

@section Scripts {
    <script>
        // Show toast if update message exists
        @if (TempData["Message"] != null)
        {
            <text>
                showToast('@TempData["Message"]', 'success');
            </text>
        }

        let pendingDeleteComponentId = null;

        function showDeleteModal() {
            showModalOverlay();
            const modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('confirmDeleteModal'));
            modal.show();

            $('#confirmDeleteModal').on('hidden.bs.modal', function () {
                hideModalOverlay();
            });
        }

        function formatChild(data, extrasHtml) {
            let html = `<div class="child-wrapper border border-dark mt-0 child-fade" style="opacity: 0; transition: opacity 0.5s ease;">`;

            html += `
                <div class="alert alert-secondary p-2 mb-2">
                    <strong>Product Properties:</strong>
                    <table class="table table-sm table-bordered mb-0 mt-2 small">
                        <thead class="table-light">
                            <tr><th>Name</th><th>Value</th><th>Units</th></tr>
                        </thead>
                        <tbody>`;

            data.forEach(p => {
                html += `<tr><td>${p.PropertyName}</td><td>${p.Value}</td><td>${p.Units ?? ''}</td></tr>`;
            });

            html += `
                        </tbody>
                    </table>
                </div>`;

            if (extrasHtml) {
                html += `<div class="mt-2">${extrasHtml}</div>`;
            }

            html += `</div>`;
            return html;
        }

        function openInventoryModal(btn) {
            const data = btn.dataset;

            $('#inv_Id').val(data.id);
            $('#inv_StockLevel').val(data.stock ?? '');
            $('#inv_ReorderPoint').val(data.reorder ?? '');
            $('#inv_LeadTimeDays').val(data.lead ?? '');
            $('#inv_CostPrice').val(data.cost ?? '');
            $('#inv_SellingPrice').val(data.sell ?? '');
            $('#inv_Notes').val(data.notes ?? '');

            const productName = $(btn).closest('tr').find('td:nth-child(3)').text().trim();
            $('#inventoryModalTitle').text(`Manage Product: ${productName}`);

            $('#propertyList').html('<tr><td colspan="4" class="text-muted">Loading...</td></tr>');
            $('#assemblyContainer').html('<div class="text-muted">Loading assemblies...</div>');

            new bootstrap.Modal(document.getElementById('inventoryModal')).show();

            loadProductDetails(data.id);
        }

        function loadProductDetails(productId) {
            $.get(`/Stock/GetProductDetails/${productId}`, function (data) {
                renderProperties(data.properties || []);
                renderAssemblies(data.assemblies || []);
            });
        }

        function renderProperties(properties) {
            if (!properties.length) {
                $('#propertyList').html('<tr><td colspan="4" class="text-muted">No properties defined.</td></tr>');
                return;
            }

            let html = '';
            properties.forEach(p => {
                html += `
                    <tr>
                        <td>${p.PropertyName}</td>
                        <td>${p.Value ?? ''}</td>
                        <td>${p.Units ?? ''}</td>
                        <td style="text-align:center;">
                            <button type="button" class="btn btn-sm theme-button no-spinner"
                                onclick="openEditPropertyModal(${p.Id}, ${$('#inv_Id').val()}, '${p.PropertyName}', '${p.Value ?? ''}', '${p.Units ?? ''}')">
                                Edit
                            </button>
                        </td>
                    </tr>`;
            });

            $('#propertyList').html(html);
        }

        function renderAssemblies(assemblies) {
            if (!assemblies.length) {
                $('#assemblyContainer').html('<div class="text-muted">No assemblies found.</div>');
                return;
            }

            let html = '';
            assemblies.forEach(a => {
                html += `
                    <div class="assembly-block shadow-sm border rounded mb-4 p-3 bg-light">
                        <table class="table table-sm table-bordered mb-0 table-striped">
                            <thead class="table-light">
                                <tr>
                                    <th colspan="7" class="bg-dark text-white px-0 py-0">
                                        <div class="d-flex justify-content-between align-items-center px-3 py-2">
                                            <span><i class="fas fa-box me-2"></i> ${a.name}</span>
                                            <button type="button" class="btn btn-sm btn-danger ms-2"
                                                    onclick="deleteAssembly(${a.id})">
                                                <i class="fas fa-trash-alt me-1"></i> Delete Assembly
                                            </button>
                                        </div>
                                    </th>
                                </tr>
                                <tr>
                                    <th>Type</th>
                                    <th>Qty</th>
                                    <th>Unit</th>
                                    <th>Cost</th>
                                    <th>Total Formula</th>
                                    <th>Notes</th>
                                    <th style="text-align:center;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>`;

                if (a.components.length > 0) {
                    a.components.forEach(c => {
                        html += `
                            <tr>
                                <td>
                                    ${c.componentProduct?.name ?? '[Unknown]'}
                                    <div class="text-muted small">${c.componentProduct?.itemType ?? ''}</div>
                                </td>
                                <td>${c.qtyPerUOM}</td>
                                <td>${c.unit}</td>
                                <td>${c.costPerUnit?.toFixed(2) ?? '-'}</td>
                                <td>${c.totalFormula ?? '-'}</td>
                                <td>${c.notes ?? '-'}</td>
                                <td style="text-align:center;width: 150px;">
                                    <button type="button" class="btn btn-sm btn-outline-secondary btn-icon me-1"
                                            onclick="editComponent(${c.id})" title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-danger btn-icon"
                                            onclick="deleteComponent(${c.id})" title="Delete">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </td>
                            </tr>`;
                    });
                } else {
                    html += `<tr><td colspan="7" class="text-muted text-center">No components yet.</td></tr>`;
                }

                html += `
                            </tbody>
                        </table>
                        <div class="mt-2 text-end">
                            <button type="button" class="btn btn-sm btn-outline-primary"
                                    onclick="openAddComponentModal(${a.id})">
                                + Add Component
                            </button>
                        </div>
                    </div>`;
            });

            $('#assemblyContainer').html(html);
        }

        function openEditPropertyModal(id, productId, name, value, units) {
            $('#editProp_Id').val(id);
            $('#editProp_ProductId').val(productId);
            $('#editProp_Name').val(name);
            $('#editProp_Value').val(value);
            $('#editProp_Units').val(units);

            new bootstrap.Modal(document.getElementById('editPropertyModal')).show();
        }

        function saveProperty() {
            const id = $('#editProp_Id').val();
            const productId = $('#editProp_ProductId').val();
            const value = $('#editProp_Value').val();
            const units = $('#editProp_Units').val();

            $.post('/ProductProperty/Update', {
                id,
                productId,
                value,
                units
            })
                .done(function () {
                    $('#editPropertyModal').modal('hide');
                    loadProductDetails(productId);
                    showToast('Property updated successfully', 'success');
                })
                .fail(function () {
                    showToast('Update failed', 'danger');
                });
        }

        function deleteProperty() {
            const id = $('#editProp_Id').val();
            const productId = $('#editProp_ProductId').val();

            $('#deleteModalMessage').text("Are you sure you want to delete this property?");
            $('#confirmDeleteBtn').off('click').on('click', function () {
                $.post('/ProductProperty/Delete', { id })
                    .done(function () {
                        $('#editPropertyModal').modal('hide');
                        $('#confirmDeleteModal').modal('hide');
                        loadProductDetails(productId);
                        showToast('Property deleted successfully', 'danger');
                    })
                    .fail(function () {
                        showToast('Delete failed', 'danger');
                    });
            });

            showDeleteModal();
        }

        function openAddPropertyModal() {
            const productId = $('#inv_Id').val();
            $('#addProp_ProductId').val(productId);
            $('#addProp_Name').val('');
            $('#addProp_Value').val('');
            $('#addProp_Units').val('');

            new bootstrap.Modal(document.getElementById('addPropertyModal')).show();
        }

        function createProperty() {
            const productId = $('#addProp_ProductId').val();
            const name = $('#addProp_Name').val().trim();
            const value = $('#addProp_Value').val().trim();
            const units = $('#addProp_Units').val().trim();

            if (!name) {
                alert("Property name is required.");
                return;
            }

            $.post('/ProductProperty/Create', {
                productId,
                propertyName: name,
                value,
                units
            })
                .done(function () {
                    $('#addPropertyModal').modal('hide');
                    loadProductDetails(productId);
                    showToast('Property added successfully', 'success');
                })
                .fail(function () {
                    showToast('Add failed', 'danger');
                });
        }

        function openAddAssemblyModal() {
            const productId = $('#inv_Id').val();
            $('#addAssembly_ProductId').val(productId);
            $('#addAssembly_Name').val('');
            new bootstrap.Modal(document.getElementById('addAssemblyModal')).show();
        }

        function createAssembly() {
            const productId = $('#addAssembly_ProductId').val();
            const name = $('#addAssembly_Name').val().trim();

            if (!name) {
                alert("Assembly name is required.");
                return;
            }

            $.post('/ProductAssembly/Create', {
                productId,
                name
            })
                .done(function () {
                    $('#addAssemblyModal').modal('hide');
                    loadProductDetails(productId);
                    showToast('Assembly added successfully', 'success');
                })
                .fail(function () {
                    showToast('Add failed', 'danger');
                });
        }

        function deleteAssembly(id) {
            $('#deleteModalMessage').html("Are you sure you want to delete this assembly?<br/><br/>All components will also be deleted!");
            $('#confirmDeleteBtn').off('click').on('click', function () {
                $.post('/ProductAssembly/Delete', { id })
                    .done(function () {
                        $('#confirmDeleteModal').modal('hide');
                        loadProductDetails($('#inv_Id').val());
                        showToast('Assembly deleted successfully', 'danger');
                    })
                    .fail(function () {
                        showToast('Delete failed', 'danger');
                    });
            });

            showDeleteModal();
        }

        function openAddComponentModal(assemblyId) {
            $('#comp_AssemblyId').val(assemblyId);
            $('#comp_ProductId').val($('#inv_Id').val());

            $('#comp_Qty').val('');
            $('#comp_Unit').val('');
            $('#comp_Cost').val('');
            $('#comp_Formula').val('');
            $('#comp_Notes').val('');

            new bootstrap.Modal(document.getElementById('addComponentModal')).show();
        }

        function createComponent() {
            const data = {
                assemblyId: $('#comp_AssemblyId').val(),
                componentProductId: $('#comp_ProductId').val(),
                qtyPerUOM: $('#comp_Qty').val(),
                unit: $('#comp_Unit').val(),
                costPerUnit: $('#comp_Cost').val(),
                totalFormula: $('#comp_Formula').val(),
                notes: $('#comp_Notes').val()
            };

            $.post('/ProductAssemblyComponent/Create', data)
                .done(function () {
                    $('#addComponentModal').modal('hide');
                    loadProductDetails($('#inv_Id').val());
                    showToast('Component added', 'success');
                })
                .fail(function () {
                    showToast('Add failed', 'danger');
                });
        }

        function saveComponent() {
            const id = $('#comp_Id').val();
            const url = id ? '/ProductAssemblyComponent/Update' : '/ProductAssemblyComponent/Create';

            const data = {
                id: id,
                assemblyId: $('#comp_AssemblyId').val(),
                componentProductId: $('#comp_ProductId').val(),
                qtyPerUOM: $('#comp_Qty').val(),
                unit: $('#comp_Unit').val(),
                costPerUnit: $('#comp_Cost').val(),
                totalFormula: $('#comp_Formula').val(),
                notes: $('#comp_Notes').val()
            };

            $.post(url, data, function () {
                $('#addComponentModal').modal('hide');
                loadProductDetails($('#inv_Id').val());
                showToast("Component saved!", "success");
            });
        }

        function editComponent(id) {
            $.get('/ProductAssemblyComponent/GetComponent', { id }, function (c) {
                $('#comp_Id').val(c.id);
                $('#comp_AssemblyId').val(c.assemblyId);
                $('#comp_ProductId').val(c.componentProductId);
                $('#comp_Qty').val(c.qtyPerUOM);
                $('#comp_Unit').val(c.unit);
                $('#comp_Cost').val(c.costPerUnit);
                $('#comp_Formula').val(c.totalFormula);
                $('#comp_Notes').val(c.notes);

                $('#addComponentModalLabel').text("Edit Component");
                $('#comp_DeleteBtn').removeClass('d-none');

                new bootstrap.Modal(document.getElementById('addComponentModal')).show();
            });
        }

        function deleteComponent(id) {
            $('#comp_Id').val(id);

            $('#deleteModalMessage').text("Are you sure you want to delete this component?");
            $('#confirmDeleteBtn').off('click').on('click', function () {
                $.post('/ProductAssemblyComponent/Delete', { id })
                    .done(function () {
                        $('#confirmDeleteModal').modal('hide');
                        $('#addComponentModal').modal('hide');
                        loadProductDetails($('#inv_Id').val());
                        showToast("Component deleted", "success");
                    })
                    .fail(function () {
                        showToast('Delete failed', 'danger');
                    });
            });

            showDeleteModal();
        }

        $(document).ready(function () {
            var table = $('#productTable').DataTable({
                responsive: true,
                pageLength: 10,
                lengthMenu: [
                    [5, 10, 25, 50, 100, -1],
                    [5, 10, 25, 50, 100, "All"]
                ],
                columnDefs: [
                    { targets: [8], orderable: false }
                ],
                initComplete: function () {
                    $('#stockGridWrapper').removeClass('d-none').addClass('visible');
                    hideSpinner();
                }
            });

            $('#productTable tbody').on('click', 'td.details-control', function () {
                var tr = $(this).closest('tr');
                var row = table.row(tr);

                if (row.child.isShown()) {
                    row.child.hide();
                    tr.find('.details-control i').removeClass('fa-minus-circle').addClass('fa-plus-circle');
                } else {
                    const data = JSON.parse(tr.attr('data-child'));
                    const extrasRaw = tr.attr('data-extras');
                    const extrasHtml = extrasRaw ? decodeURIComponent(extrasRaw.replace(/\+/g, ' ')) : null;

                    row.child(formatChild(data, extrasHtml)).show();

                    setTimeout(() => {
                        row.child().find('.child-fade').css('opacity', 1);
                    }, 20);

                    tr.find('.details-control i').removeClass('fa-plus-circle').addClass('fa-minus-circle');
                }
            });
        });

        function showModalOverlay() {
            if (!document.getElementById('modalOverlayBlur')) {
                const overlay = document.createElement('div');
                overlay.className = 'modal-overlay-blur';
                overlay.id = 'modalOverlayBlur';
                document.body.appendChild(overlay);
            }
        }

        function hideModalOverlay() {
            const overlay = document.getElementById('modalOverlayBlur');
            if (overlay) overlay.remove();
        }
    </script>
}