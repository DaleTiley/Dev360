@model MillinniumWebFixed.ViewModels.DetailsExcelViewModel
@using System.Globalization

@{
    ViewBag.Title = "Quote Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="mainContent" style="opacity: 0;">
    <div class="container mt-0">
        <div class="bg-dark text-white p-2 rounded mb-2 shadow-sm">
            <h6 class="mb-0 small">
                Project Name &amp; Version: @Model.GeneralData.ProjectName (v@(Model.GeneralData.Version))
            </h6>
        </div>

        <div class="card shadow-sm border border-light-subtle" style="margin-bottom: 10px;">
            <div class="card-body py-2 px-3 d-flex justify-content-between align-items-center">
                <span class="fw-semibold text-muted">Options</span>
                <div class="d-flex gap-2">
                    <a href="@Url.Action("ListExcel", "Import")" class="btn btn-dark btn-sm px-3">
                        <i class="fas fa-hand-point-left me-1"></i> Back to List
                    </a>
                    <button class="btn btn-outline-secondary btn-sm d-none" id="btnSortSections">
                        <i class="fas fa-hand-pointer me-1"></i> Sort A–Z
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" id="btnExpandAll">
                        <i class="fas fa-hand-point-down me-1"></i> Expand All
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" id="btnCollapseAll">
                        <i class="fas fa-hand-point-up me-1"></i> Collapse All
                    </button>
                </div>
            </div>
        </div>

        <div class="accordion accordion-flush small" id="projectAccordion">
            <!-- General Info -->
            <div class="accordion-item mb-5">
                <div class="accordion accordion-flush small" id="projectAccordion">
                    <!-- General Info -->
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingGeneral">
                            <button class="accordion-button collapsed fw-semibold text-dark bg-light" type="button" data-bs-toggle="collapse" data-bs-target="#collapseGeneral">
                                General Project Info
                            </button>
                        </h2>
                        <div id="collapseGeneral" class="accordion-collapse collapse" data-bs-parent="#projectAccordion">
                            <div class="accordion-body p-2">
                                <div class="table-responsive">
                                    <table class="table table-sm table-striped table-bordered mb-0">
                                        <tbody>
                                            <tr><th class="text-end" style="width: 200px;">Created</th><td>@(Model.GeneralData.CreatedAt?.ToString("yyyy-MM-dd HH:mm"))</td></tr>
                                            <tr><th class="text-end">Designer</th><td>@Model.GeneralData.Designer</td></tr>
                                            <tr><th class="text-end">Customer Name</th><td>@Model.GeneralData.CustomerName</td></tr>
                                            <tr><th class="text-end">Fabricator</th><td>@Model.GeneralData.Fabricator</td></tr>
                                            <tr><th class="text-end">Template</th><td>@Model.GeneralData.Template</td></tr>
                                            <tr><th class="text-end">Project Type</th><td>@Model.GeneralData.ProjectType</td></tr>
                                            <tr>
                                                <th class="text-end">TOTAL Timber</th>
                                                <td>@(Model.GeneralData.TotalMaterialPriceTimber?.ToString("C", CultureInfo.CreateSpecificCulture("en-ZA")))</td>
                                            </tr>
                                            <tr>
                                                <th class="text-end">TOTAL Wooden Items</th>
                                                <td>@(Model.GeneralData.TotalMaterialPriceAllWoodenItems?.ToString("C", CultureInfo.CreateSpecificCulture("en-ZA")))</td>
                                            </tr>
                                            <tr>
                                                <th class="text-end">TOTAL Plates</th>
                                                <td>@(Model.GeneralData.TotalMaterialPricePlates?.ToString("C", CultureInfo.CreateSpecificCulture("en-ZA")))</td>
                                            </tr>

                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Dynamic Sections -->
                    @foreach (var sec in Model.Sections)
                    {
                        var secId = new string(sec.Key.Where(char.IsLetterOrDigit).ToArray());
                        var tableId = "table_" + secId;

                        <div class="accordion-item">
                            <h2 class="accordion-header" id="heading_@secId">
                                <button class="accordion-button collapsed" type="button"
                                        data-bs-toggle="collapse"
                                        data-bs-target="#collapse_@secId"
                                        aria-expanded="false"
                                        aria-controls="collapse_@secId">
                                    @sec.Key <span class="text-muted small fst-italic">&nbsp;&nbsp;(@(sec.Value?.Count ?? 0) Records)</span>
                                </button>
                            </h2>

                            <div id="collapse_@secId" class="accordion-collapse collapse" data-bs-parent="#projectAccordion">
                                <div class="accordion-body p-2">
                                    @if (sec.Value != null && sec.Value.Any())
                                    {
                                        <div class="table-responsive d-none" data-fade>
                                            <table id="@tableId" class="table table-bordered table-sm table-striped small w-100">
                                                <thead class="table-light">
                                                    <tr>
                                                        @foreach (var prop in sec.Value.First().GetType().GetProperties())
                                                        {
                                                            if (prop.Name != "GeneralProjectData" && prop.Name != "GeneralProjectDataId" && prop.Name != "Id")
                                                            {
                                                                <th>@prop.Name</th>
                                                            }
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var row in sec.Value)
                                                    {
                                                        <tr>
                                                            @foreach (var prop in row.GetType().GetProperties())
                                                            {
                                                                if (prop.Name != "GeneralProjectData" && prop.Name != "GeneralProjectDataId" && prop.Name != "Id")
                                                                {
                                                                    <td>@(prop.GetValue(row))</td>
                                                                }
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-muted small mb-0">No data available.</p>
                                    }
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Images -->
                    <div class="accordion-item">
                        <h2 class="accordion-header accordion-item" id="headingImages">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseImages">
                                Images
                            </button>
                        </h2>
                        <div id="collapseImages" class="accordion-collapse collapse" data-bs-parent="#projectAccordion">
                            <div class="accordion-body">
                                <div class="card border-secondary mb-3">
                                    <div class="card-header bg-dark text-white py-2 px-3">
                                        Upload New Project Image(s) - Individual OR Multi Select (Choose Files Below)
                                    </div>
                                    <div class="card-body py-2 px-3">
                                        @using (Html.BeginForm("UploadImages", "Image", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                        {
                                            @Html.Hidden("id", Model.GeneralData.Id, new { @class = "d-none" })

                                            <div class="mb-2">
                                                <input type="file" name="imageFiles" id="imageFiles" accept="image/*" class="form-control form-control-sm" multiple required />
                                            </div>

                                            <button type="submit" class="btn btn-sm btn-dark mt-1">Upload</button>
                                        }
                                    </div>
                                </div>

                                <hr />

                                <div class="row mt-3">
                                    @if (Model.ProjectImages != null && Model.ProjectImages.Any())
                                    {
                                        int index = 0;
                                        foreach (var img in Model.ProjectImages)
                                        {
                                            <div class="col-md-3 mb-3">
                                                <div class="card shadow-sm">
                                                    <img src="@Url.Content(img.FilePath)" class="card-img-top img-thumbnail"
                                                         loading="lazy"
                                                         alt="Project Image"
                                                         style="height: 150px; object-fit: cover; cursor: pointer;"
                                                         data-bs-toggle="modal" data-bs-target="#carouselModal" data-bs-slide-to="@index" />
                                                    <div class="card-footer text-center">
                                                        <button type="button" class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal_@img.Id">
                                                            Delete
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Delete Confirmation Modal -->
                                            <div class="modal fade" id="confirmDeleteModal_@img.Id" tabindex="-1" aria-hidden="true">
                                                <div class="modal-dialog modal-dialog-centered">
                                                    <div class="modal-content shadow-sm border-0">
                                                        <div class="modal-header py-1 px-3" style="background-color: #001C2B; color: white;">
                                                            <h5 class="modal-title mb-0 fs-6">Confirm Delete</h5>
                                                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                                        </div>
                                                        <div class="modal-body text-center small">
                                                            Are you sure you want to delete this image?
                                                        </div>
                                                        <div class="modal-footer justify-content-center border-0">
                                                            <form action="@Url.Action("DeleteImage", "Image")" method="post" class="d-inline">
                                                                <input type="hidden" name="id" value="@img.Id" />
                                                                <input type="hidden" name="projectId" value="@Model.GeneralData.Id" />
                                                                <button type="submit" class="btn btn-danger px-4">Delete</button>
                                                            </form>
                                                            <button type="button" class="btn btn-outline-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            index++;
                                        }
                                    }
                                    else
                                    {
                                        <p>No images uploaded yet.</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bootstrap Fullscreen Carousel Modal -->
                <div class="modal fade" id="carouselModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-fullscreen">
                        <div class="modal-content border-0 bg-white text-dark">
                            <div class="modal-header border-0" style="background-color: #001C2B; color: white;">
                                <h6 class="modal-title">Image Gallery</h6>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>

                            <div class="modal-body carousel-modal-body d-flex justify-content-center align-items-center">
                                <div id="carouselIndicators" class="carousel slide w-100" data-bs-ride="carousel">
                                    <div class="carousel-inner text-center">
                                        @for (int i = 0; i < Model.ProjectImages.Count; i++)
                                        {
                                            var image = Model.ProjectImages[i];
                                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                                <img src="@Url.Content(image.FilePath)"
                                                     class="img-fluid mx-auto d-block"
                                                     style="max-height: 90vh; object-fit: contain;"
                                                     alt="Project Image @i" />
                                            </div>
                                        }
                                    </div>

                                    <!-- Arrows -->
                                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselIndicators" data-bs-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Previous</span>
                                    </button>
                                    <button class="carousel-control-next" type="button" data-bs-target="#carouselIndicators" data-bs-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Next</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.bootstrap5.min.css" />
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>

    <script>
        // Immediately hide page to prevent flash of unstyled content
        document.documentElement.style.visibility = 'hidden';

        window.onload = function () {
            hideSpinner();
            const main = document.getElementById('mainContent');
            if (main) {
                main.style.transition = "opacity 0.5s ease";
                main.style.opacity = 1;
            }
            document.documentElement.style.visibility = 'visible';
        };

        document.addEventListener("DOMContentLoaded", function () {
            showSpinner("Loading project...");

            // Toast messages
            @if (TempData["Message"] != null)
            {
                <text>showToast(@Html.Raw(Json.Encode(TempData["Message"])), 'success');</text>
            }
            else if (TempData["Error"] != null)
            {
                <text>showToast(@Html.Raw(Json.Encode(TempData["Error"])), 'danger');</text>
            }

            // Spinner on image form submit
            document.querySelectorAll('form[action*="DeleteImage"], form[action*="UploadImages"]').forEach(form => {
                form.addEventListener('submit', function () {
                    const modal = bootstrap.Modal.getInstance(form.closest('.modal'));
                    if (modal) modal.hide();
                    showSpinner("Please wait...");
                });
            });

            // Initialize DataTables inside accordion
            document.querySelectorAll('.accordion-collapse').forEach(section => {
                section.addEventListener('shown.bs.collapse', function () {
                    const wrappers = this.querySelectorAll('.table-responsive[data-fade]');
                    wrappers.forEach(wrapper => {
                        wrapper.classList.remove('d-none');
                        void wrapper.offsetWidth;

                        const tbl = wrapper.querySelector('table');
                        if (!$.fn.dataTable.isDataTable(tbl)) {
                            $(tbl).DataTable({
                                responsive: {
                                    details: {
                                        type: 'inline',
                                        target: 'tr',
                                        renderer: function (api, rowIdx, columns) {
                                            let data = columns
                                                .filter(col => col.hidden)
                                                .map(col => `
                                                <tr>
                                                    <td class="fw-semibold text-end pe-2" style="width: 30%;">${col.title}</td>
                                                    <td>${col.data}</td>
                                                </tr>`).join('');
                                            return data ? `<table class="table table-borderless table-sm w-100">${data}</table>` : false;
                                        }
                                    }
                                },
                                scrollX: false,
                                autoWidth: false,
                                pageLength: 10,
                                lengthMenu: [5, 10, 25, 50, 100],
                                language: {
                                    search: "Filter:",
                                    lengthMenu: "Show _MENU_ entries"
                                }
                            });
                        } else {
                            $(tbl).DataTable().columns.adjust().draw();
                        }

                        wrapper.classList.add('fade-in');
                    });
                });
            });

            // Image click = carousel jump
            document.querySelectorAll('[data-bs-target="#carouselModal"]').forEach((img, idx) => {
                img.addEventListener('click', () => {
                    const carousel = document.getElementById('carouselIndicators');
                    const bsCarousel = bootstrap.Carousel.getInstance(carousel) || new bootstrap.Carousel(carousel);
                    bsCarousel.to(idx);
                });
            });
        });

        // Expand/collapse all
        document.getElementById('btnExpandAll')?.addEventListener('click', () => {
            document.querySelectorAll('.accordion-collapse').forEach(el => {
                bootstrap.Collapse.getOrCreateInstance(el).show();
            });
        });
        document.getElementById('btnCollapseAll')?.addEventListener('click', () => {
            document.querySelectorAll('.accordion-collapse').forEach(el => {
                bootstrap.Collapse.getOrCreateInstance(el).hide();
            });
        });

        // Optional: Sort accordion headers A-Z (requires DOM reordering if wanted)
        let originalOrder = [];

        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('projectAccordion');
            const sortBtn = document.getElementById('btnSortSections');

            if (!container || !sortBtn) return;

            // Store original DOM order
            originalOrder = Array.from(container.querySelectorAll('.accordion-item'));

            sortBtn.addEventListener('click', function () {
                const items = Array.from(container.querySelectorAll('.accordion-item'))
                    .filter(i => !i.querySelector('#collapseGeneral') && !i.querySelector('#collapseImages'));

                const isSorted = sortBtn.getAttribute('data-sorted') === 'true';

                if (!isSorted) {
                    items.sort((a, b) => {
                        const aText = a.querySelector('.accordion-button')?.innerText.trim().toLowerCase();
                        const bText = b.querySelector('.accordion-button')?.innerText.trim().toLowerCase();
                        return aText.localeCompare(bText);
                    });
                    items.forEach(item => container.appendChild(item));
                    sortBtn.setAttribute('data-sorted', 'true');
                    sortBtn.innerHTML = `<i class="fas fa-sort-alpha-down"></i> A–Z`;
                } else {
                    originalOrder.forEach(item => container.appendChild(item));
                    sortBtn.setAttribute('data-sorted', 'false');
                    sortBtn.innerHTML = `<i class="fas fa-sort"></i> Original`;
                }
            });
        });
    </script>
}
